/*grammar org.xtext.de.htwg.Plugin with org.eclipse.xtext.xbase.Xbase

generate plugin "http://www.xtext.org/de/htwg/Plugin"

Plugin:
	importSection=XImportSection?
	elements+=AbstractElement*
;

AbstractElement:
	PackageDeclaration | Model | Controller | Database | Enumeration
;

PackageDeclaration:
	'package' name=QualifiedName '{'
		elements+=AbstractElement*
	'}'
;

Model:
	'model' name=ValidID ('extends' superType=JvmTypeReference)? '{'
		properties+=Property*
		methods+=Method*
	'}'
;

Controller:
	'controller' name=ValidID ('extends' superType=JvmTypeReference)? '{'
		methods+=Method*
	'}'
;

Database:
	'database' name=ValidID ('extends' superType=JvmTypeReference)? '{'
		methods+=Method*
	'}'
;

Enumeration:
	'enum' name=ValidID '{'
		(enumValues += ID
			(',' enumValues += ID)?)+
	'}'
;

Property:
	'property' name=ValidID ':' type=JvmTypeReference
;

Method:
	'method' name=ValidID 
		'('(params+=FullJvmFormalParameter 
			(',' params+=FullJvmFormalParameter)*)?')'
		':' type=JvmTypeReference
;*/

grammar org.xtext.de.htwg.Plugin with org.eclipse.xtext.common.Terminals

generate plugin "http://www.xtext.org/de/htwg/Plugin"

Plugin:
	elements+=AbstractElement*
;

AbstractElement:
	PackageDeclaration | BasicTypeDeclaration | Type | Import
;

QualifiedName:
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

Type:
	Typedef | Model | Controller | Database | Enumeration
;

Typedef:
	'type' name=ID
;

BasicTypeDeclaration:
	'basic-types' name=ID '{'
		elements+=Typedef*
	'}'
;

PackageDeclaration:
	'package' name=QualifiedName '{'
		elements+=AbstractElement*
	'}'
;

Import:
	'import' importedNamespace = QualifiedNameWithWildcard
;

Model:
	'model' name=ID ('extends' superType=[Model | QualifiedName])? '{'
		properties+=Property*
		methods+=Method*
	'}'
;

Controller:
	'controller' name=ID ('extends' superType=[Controller | QualifiedName])? '{'
		methods+=Method*
	'}'
;

Database:
	'database' name=ID ('extends' superType=[Database | QualifiedName])? '{'
		methods+=Method*
	'}'
;

Enumeration:
	'enum' name=ID '{'
		(enumValues += ID
			(',' enumValues += ID)?)+
	'}'
;

Property:
	'property' name=ID ':' type= [Type | QualifiedName]
;

Method:
	'method' name=ID 
		'('(params+=Parameter 
			(',' params+=Parameter)*)?')'
		':' type=[Type | QualifiedName]
;

Parameter:
	name=ID ':' type= [Type | QualifiedName]
;