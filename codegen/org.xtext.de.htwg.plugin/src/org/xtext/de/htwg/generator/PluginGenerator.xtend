/*
 * generated by Xtext
 */
package org.xtext.de.htwg.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.de.htwg.plugin.Model
import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.xtext.de.htwg.plugin.Method
import org.xtext.de.htwg.plugin.Controller
import org.xtext.de.htwg.plugin.Database
import org.xtext.de.htwg.plugin.Enumeration
import org.xtext.de.htwg.plugin.MyProperty

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class PluginGenerator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	val modelSubpackageName = "models"
	val controllerSubpackageName = "controllers"
	val databaseSubpackageName = "database"
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		// Generate models
		for (e: resource.allContents.toIterable.filter(typeof(Model))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + modelSubpackageName + "/I" + e.fullyQualifiedName.lastSegment + ".java",
				e.compileInterface(modelSubpackageName))
		}
		for (e: resource.allContents.toIterable.filter(typeof(Model))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + modelSubpackageName + "/impl/" + e.fullyQualifiedName.lastSegment + ".java",
				e.compile(modelSubpackageName + ".impl"))
		}
		for (e: resource.allContents.toIterable.filter(typeof(Model))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + modelSubpackageName + "/mock/" + e.fullyQualifiedName.lastSegment + ".java",
				e.compile(modelSubpackageName + ".mock"))
		}
		
		// Generate controllers
		for (e: resource.allContents.toIterable.filter(typeof(Controller))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + controllerSubpackageName + "/I" + e.fullyQualifiedName.lastSegment + ".java",
				e.compileInterface(controllerSubpackageName))
		}
		for (e: resource.allContents.toIterable.filter(typeof(Controller))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + controllerSubpackageName + "/impl/" + e.fullyQualifiedName.lastSegment + ".java",
				e.compile(controllerSubpackageName + ".impl"))
		}
		for (e: resource.allContents.toIterable.filter(typeof(Controller))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + controllerSubpackageName + "/mock/" + e.fullyQualifiedName.lastSegment + ".java",
				e.compile(controllerSubpackageName + ".mock"))
		}
		
		// Generate database
		for (e: resource.allContents.toIterable.filter(typeof(Database))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + databaseSubpackageName + "/I" + e.fullyQualifiedName.lastSegment + ".java",
				e.compileInterface(databaseSubpackageName))
		}
		for (e: resource.allContents.toIterable.filter(typeof(Database))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + databaseSubpackageName + "/impl/" + e.fullyQualifiedName.lastSegment + ".java",
				e.compile(databaseSubpackageName + ".impl"))
		}
		for (e: resource.allContents.toIterable.filter(typeof(Database))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + databaseSubpackageName + "/mock/" + e.fullyQualifiedName.lastSegment + ".java",
				e.compile(databaseSubpackageName + ".mock"))
		}
		
		// Generate Enumerations
		for (e: resource.allContents.toIterable.filter(typeof(Enumeration))) {
			fsa.generateFile(
				e.fullyQualifiedName.skipLast(1).toString("/") + "/" + modelSubpackageName + "/" + e.fullyQualifiedName.lastSegment + ".java",
				e.compile(modelSubpackageName))
		}
	}
	
	def compileInterface(Model model, String packageExtension)'''
		«IF model.eContainer != null»
			package «model.eContainer.fullyQualifiedName».«packageExtension»;
		«ENDIF»

		/**
		 * Generated model interface I«model.name».
		 * @author TODO
		 * @version TODO
		 */
		public interface «model.name» {
			«FOR p:model.properties»
				«p.compilePropertyGetterSetterInterface»
			«ENDFOR»
			
			«FOR m:model.methods»
				«m.compileMethodInterface»
			«ENDFOR»
		}
	'''
	
	def compile(Model model, String packageExtension)'''
		«IF model.eContainer != null»
			package «model.eContainer.fullyQualifiedName».«modelSubpackageName».«packageExtension»;
		«ENDIF»

		/**
		 * Generated model class «model.name».
		 * @author TODO
		 * @version TODO
		 */
		public class «model.name» «IF model.superType != null »extends «model.superType.fullyQualifiedName» «ENDIF» implements I«model.name» {
			«FOR p:model.properties»
				«IF p != null »
					«p.compilePropertyMember»
				«ENDIF»
			«ENDFOR»
			
			«FOR p:model.properties»
				«p.compilePropertyGetterSetter»
			«ENDFOR»
			
			«FOR m:model.methods»
				«m.compileMethod»
			«ENDFOR»
		}
	'''
	
	def compileInterface(Controller controller, String packageExtension)'''
		«IF controller.eContainer != null»
			package «controller.eContainer.fullyQualifiedName».«packageExtension»;
		«ENDIF»

		/**
		 * Generated interface class I«controller.name».
		 * @author TODO
		 * @version TODO
		 */
		public interface I«controller.name» {
			«FOR m:controller.methods»
				«m.compileMethodInterface»
			«ENDFOR»
		}
	'''
	
	def compile(Controller controller, String packageExtension)'''
		«IF controller.eContainer != null»
			package «controller.eContainer.fullyQualifiedName».«packageExtension»;
		«ENDIF»

		/**
		 * Generated controller class «controller.name».
		 * @author TODO
		 * @version TODO
		 */
		public class «controller.name» «IF controller.superType != null »extends «controller.superType.fullyQualifiedName» «ENDIF» implements I«controller.name» {
			«FOR m:controller.methods»
				«m.compileMethod»
			«ENDFOR»
		}
	'''
	
	def compileInterface(Database db, String packageExtension)'''
		«IF db.eContainer != null»
			package «db.eContainer.fullyQualifiedName».«packageExtension»;
		«ENDIF»

		/**
		 * Generated interface class I«db.name».
		 * @author TODO
		 * @version TODO
		 */
		public interface I«db.name» {
			«FOR m:db.methods»
				«m.compileMethodInterface»
			«ENDFOR»
		}
	'''
	
	def compile(Database db, String packageExtension)'''
		«IF db.eContainer != null»
			package «db.eContainer.fullyQualifiedName».«packageExtension»;
		«ENDIF»

		/**
		 * Generated database class «db.name».
		 * @author TODO
		 * @version TODO
		 */
		public class «db.name» «IF db.superType != null »extends «db.superType.fullyQualifiedName» «ENDIF» implements I«db.name» {
			«FOR m:db.methods»
				«m.compileMethod»
			«ENDFOR»
		}
	'''
	
	def compile(Enumeration enumeration, String packageExtension)'''
		«IF enumeration.eContainer != null»
			package «enumeration.eContainer.fullyQualifiedName».«packageExtension»;
		«ENDIF»

		/**
		 * Generated enumeration «enumeration.name».
		 * @author TODO
		 * @version TODO
		 */
		public enum «enumeration.name» {
			«FOR e:enumeration.enumValues SEPARATOR ", "»
				«e.toFirstUpper»
			«ENDFOR»
		}
	'''
	
	def compilePropertyMember(MyProperty p) '''

		/**
		 * The «p.name» member.
		 */
		private «p.type.fullyQualifiedName» «p.name»;
	'''
	
	def compilePropertyGetterSetter(MyProperty p) '''

		@Override
		public «p.type.fullyQualifiedName» get«p.name.toFirstUpper»() {
			return «p.name»;
		}

		@Override
		public void set«p.name.toFirstUpper»(«p.type.fullyQualifiedName» «p.name») {
			this.«p.name» = «p.name»;
		}
	'''
	
	def compilePropertyGetterSetterInterface(MyProperty p) '''

		/**
		 * Gets the «p.name».
		 * @return The «p.name».
		 */
		public «p.type.fullyQualifiedName» get«p.name.toFirstUpper»();

		/**
		 * Sets the «p.name».
		 * @param «p.name» The «p.name» value.
		 */
		public void set«p.name.toFirstUpper»(«p.type.fullyQualifiedName» «p.name»);
	'''
	
	def compileMethod(Method p) '''

		@Override
		public «p.type.fullyQualifiedName» «p.name.toFirstLower»(«FOR prm:p.params SEPARATOR ", "»«prm.type.fullyQualifiedName» «prm.name»«ENDFOR») {
			//TODO: implement method
		}
	'''
	
	def compileMethodInterface(Method p) '''

		/**
		 * TODO: Method description...
		 * «IF p.params != null»@param TODO: describle all parameters...«ENDIF»
		 * «IF !p.type.fullyQualifiedName.toString.equals("void")»@return TODO: Return value description...«ENDIF»
		 */
		public «p.type.fullyQualifiedName» «p.name.toFirstLower»(«FOR prm:p.params SEPARATOR ", "»«prm.type.fullyQualifiedName» «prm.name»«ENDFOR»);
	'''
}
