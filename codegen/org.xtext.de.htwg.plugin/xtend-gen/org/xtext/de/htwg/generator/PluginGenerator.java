/**
 * generated by Xtext
 */
package org.xtext.de.htwg.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.de.htwg.plugin.Enumeration;
import org.xtext.de.htwg.plugin.Import;
import org.xtext.de.htwg.plugin.Interface;
import org.xtext.de.htwg.plugin.Method;
import org.xtext.de.htwg.plugin.MyProperty;
import org.xtext.de.htwg.plugin.Parameter;
import org.xtext.de.htwg.plugin.Plugin;
import org.xtext.de.htwg.plugin.Type;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class PluginGenerator implements IGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  private final String implSubpackageName = "impl";
  
  private final String mockSubpackageName = "mock";
  
  private final String pluginTuiName = "PluginTUI";
  
  private final String pluginImplModuleName = "PluginImplModule";
  
  private final String pluginMockModuleName = "PluginMockModule";
  
  private final String pluginMainName = "PluginMain";
  
  private QualifiedName rootPackage = QualifiedName.EMPTY;
  
  private String pluginName = "";
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Plugin> _filter = Iterables.<Plugin>filter(_iterable, Plugin.class);
    for (final Plugin e : _filter) {
      {
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(e);
        this.rootPackage = _fullyQualifiedName;
        String _name = e.getName();
        String _lowerCase = _name.toLowerCase();
        String _firstUpper = StringExtensions.toFirstUpper(_lowerCase);
        this.pluginName = _firstUpper;
      }
    }
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<Interface> _filter_1 = Iterables.<Interface>filter(_iterable_1, Interface.class);
    for (final Interface e_1 : _filter_1) {
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(e_1);
      String _string = _fullyQualifiedName.toString("/");
      String _plus = (_string + ".java");
      CharSequence _compileInterface = this.compileInterface(e_1);
      fsa.generateFile(_plus, _compileInterface);
    }
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
    Iterable<Interface> _filter_2 = Iterables.<Interface>filter(_iterable_2, Interface.class);
    for (final Interface e_2 : _filter_2) {
      QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(e_2);
      QualifiedName _skipLast = _fullyQualifiedName_1.skipLast(1);
      String _string_1 = _skipLast.toString("/");
      String _plus_1 = (_string_1 + "/");
      String _plus_2 = (_plus_1 + this.implSubpackageName);
      String _plus_3 = (_plus_2 + "/");
      QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(e_2);
      String _lastSegment = _fullyQualifiedName_2.getLastSegment();
      String _className = this.getClassName(_lastSegment);
      String _plus_4 = (_plus_3 + _className);
      String _plus_5 = (_plus_4 + ".java");
      CharSequence _compile = this.compile(e_2, this.implSubpackageName);
      fsa.generateFile(_plus_5, _compile);
    }
    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
    Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
    Iterable<Interface> _filter_3 = Iterables.<Interface>filter(_iterable_3, Interface.class);
    for (final Interface e_3 : _filter_3) {
      QualifiedName _fullyQualifiedName_3 = this._iQualifiedNameProvider.getFullyQualifiedName(e_3);
      QualifiedName _skipLast_1 = _fullyQualifiedName_3.skipLast(1);
      String _string_2 = _skipLast_1.toString("/");
      String _plus_6 = (_string_2 + "/");
      String _plus_7 = (_plus_6 + this.mockSubpackageName);
      String _plus_8 = (_plus_7 + "/");
      QualifiedName _fullyQualifiedName_4 = this._iQualifiedNameProvider.getFullyQualifiedName(e_3);
      String _lastSegment_1 = _fullyQualifiedName_4.getLastSegment();
      String _className_1 = this.getClassName(_lastSegment_1);
      String _plus_9 = (_plus_8 + _className_1);
      String _plus_10 = (_plus_9 + ".java");
      CharSequence _compile_1 = this.compile(e_3, this.mockSubpackageName);
      fsa.generateFile(_plus_10, _compile_1);
    }
    TreeIterator<EObject> _allContents_4 = resource.getAllContents();
    Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
    Iterable<Enumeration> _filter_4 = Iterables.<Enumeration>filter(_iterable_4, Enumeration.class);
    for (final Enumeration e_4 : _filter_4) {
      QualifiedName _fullyQualifiedName_5 = this._iQualifiedNameProvider.getFullyQualifiedName(e_4);
      String _string_3 = _fullyQualifiedName_5.toString("/");
      String _plus_11 = (_string_3 + ".java");
      CharSequence _compile_2 = this.compile(e_4);
      fsa.generateFile(_plus_11, _compile_2);
    }
    String _string_4 = this.rootPackage.toString("/");
    String _plus_12 = (_string_4 + "/views/tui/");
    String _plus_13 = (_plus_12 + this.pluginTuiName);
    String _plus_14 = (_plus_13 + ".java");
    String _string_5 = this.rootPackage.toString();
    CharSequence _compileTUI = this.compileTUI(_string_5, this.pluginTuiName);
    fsa.generateFile(_plus_14, _compileTUI);
    String _string_6 = this.rootPackage.toString("/");
    String _plus_15 = (_string_6 + "/module/");
    String _plus_16 = (_plus_15 + this.pluginImplModuleName);
    String _plus_17 = (_plus_16 + ".java");
    String _string_7 = this.rootPackage.toString();
    CharSequence _compileModule = this.compileModule(_string_7, this.pluginImplModuleName, this.implSubpackageName);
    fsa.generateFile(_plus_17, _compileModule);
    String _string_8 = this.rootPackage.toString("/");
    String _plus_18 = (_string_8 + "/module/");
    String _plus_19 = (_plus_18 + this.pluginMockModuleName);
    String _plus_20 = (_plus_19 + ".java");
    String _string_9 = this.rootPackage.toString();
    CharSequence _compileModule_1 = this.compileModule(_string_9, this.pluginMockModuleName, this.mockSubpackageName);
    fsa.generateFile(_plus_20, _compileModule_1);
    String _string_10 = this.rootPackage.toString("/");
    String _plus_21 = (_string_10 + "/");
    String _plus_22 = (_plus_21 + this.pluginMainName);
    String _plus_23 = (_plus_22 + ".java");
    String _string_11 = this.rootPackage.toString();
    CharSequence _compileMain = this.compileMain(_string_11, this.pluginMainName, this.pluginTuiName, this.pluginImplModuleName);
    fsa.generateFile(_plus_23, _compileMain);
  }
  
  public CharSequence compileInterface(final Interface iface) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _eContainer = iface.eContainer();
      boolean _notEquals = (!Objects.equal(_eContainer, null));
      if (_notEquals) {
        _builder.append("package ");
        EObject _eContainer_1 = iface.eContainer();
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
        _builder.append(_fullyQualifiedName, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        {
          EObject _eContainer_2 = iface.eContainer();
          EList<EObject> _eContents = _eContainer_2.eContents();
          Iterable<Import> _filter = Iterables.<Import>filter(_eContents, Import.class);
          for(final Import i : _filter) {
            _builder.append("import ");
            _builder.append(this.rootPackage, "");
            _builder.append(".");
            String _importedNamespace = i.getImportedNamespace();
            _builder.append(_importedNamespace, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated model interface ");
    String _name = iface.getName();
    _builder.append(_name, " ");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @author TODO");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @version TODO");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public interface ");
    String _name_1 = iface.getName();
    _builder.append(_name_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<MyProperty> _properties = iface.getProperties();
      for(final MyProperty p : _properties) {
        _builder.append("\t");
        CharSequence _compilePropertyGetterSetterInterface = this.compilePropertyGetterSetterInterface(p);
        _builder.append(_compilePropertyGetterSetterInterface, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Method> _methods = iface.getMethods();
      for(final Method m : _methods) {
        _builder.append("\t");
        CharSequence _compileMethodInterface = this.compileMethodInterface(m);
        _builder.append(_compileMethodInterface, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Interface iface, final String packageExtension) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _eContainer = iface.eContainer();
      boolean _notEquals = (!Objects.equal(_eContainer, null));
      if (_notEquals) {
        _builder.append("package ");
        EObject _eContainer_1 = iface.eContainer();
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
        _builder.append(_fullyQualifiedName, "");
        _builder.append(".");
        _builder.append(packageExtension, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("import ");
        EObject _eContainer_2 = iface.eContainer();
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_2);
        _builder.append(_fullyQualifiedName_1, "");
        _builder.append(".*;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        {
          EObject _eContainer_3 = iface.eContainer();
          EList<EObject> _eContents = _eContainer_3.eContents();
          Iterable<Import> _filter = Iterables.<Import>filter(_eContents, Import.class);
          for(final Import i : _filter) {
            _builder.append("import ");
            _builder.append(this.rootPackage, "");
            _builder.append(".");
            String _importedNamespace = i.getImportedNamespace();
            _builder.append(_importedNamespace, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated model class ");
    String _name = iface.getName();
    _builder.append(_name, " ");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @author TODO");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @version TODO");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ");
    String _name_1 = iface.getName();
    String _className = this.getClassName(_name_1);
    _builder.append(_className, "");
    _builder.append(" implements ");
    String _name_2 = iface.getName();
    _builder.append(_name_2, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<MyProperty> _properties = iface.getProperties();
      for(final MyProperty p : _properties) {
        {
          boolean _notEquals_1 = (!Objects.equal(p, null));
          if (_notEquals_1) {
            _builder.append("\t");
            CharSequence _compilePropertyMember = this.compilePropertyMember(p);
            _builder.append(_compilePropertyMember, "	");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<MyProperty> _properties_1 = iface.getProperties();
      for(final MyProperty p_1 : _properties_1) {
        _builder.append("\t");
        CharSequence _compilePropertyGetterSetter = this.compilePropertyGetterSetter(p_1);
        _builder.append(_compilePropertyGetterSetter, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Method> _methods = iface.getMethods();
      for(final Method m : _methods) {
        _builder.append("\t");
        CharSequence _compileMethod = this.compileMethod(m);
        _builder.append(_compileMethod, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Enumeration enumeration) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _eContainer = enumeration.eContainer();
      boolean _notEquals = (!Objects.equal(_eContainer, null));
      if (_notEquals) {
        _builder.append("package ");
        EObject _eContainer_1 = enumeration.eContainer();
        QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_eContainer_1);
        _builder.append(_fullyQualifiedName, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        {
          EObject _eContainer_2 = enumeration.eContainer();
          EList<EObject> _eContents = _eContainer_2.eContents();
          Iterable<Import> _filter = Iterables.<Import>filter(_eContents, Import.class);
          for(final Import i : _filter) {
            _builder.append("import ");
            _builder.append(this.rootPackage, "");
            _builder.append(".");
            String _importedNamespace = i.getImportedNamespace();
            _builder.append(_importedNamespace, "");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated enumeration ");
    String _name = enumeration.getName();
    _builder.append(_name, " ");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @author TODO");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @version TODO");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public enum ");
    String _name_1 = enumeration.getName();
    _builder.append(_name_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<String> _enumValues = enumeration.getEnumValues();
      boolean _hasElements = false;
      for(final String e : _enumValues) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "	");
        }
        _builder.append("\t");
        String _firstUpper = StringExtensions.toFirstUpper(e);
        _builder.append(_firstUpper, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePropertyMember(final MyProperty p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The ");
    String _name = p.getName();
    _builder.append(_name, " ");
    _builder.append(" member.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("private ");
    Type _type = p.getType();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_type);
    String _lastSegment = _fullyQualifiedName.getLastSegment();
    _builder.append(_lastSegment, "");
    _builder.append(" ");
    String _name_1 = p.getName();
    _builder.append(_name_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compilePropertyGetterSetter(final MyProperty p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public ");
    Type _type = p.getType();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_type);
    String _lastSegment = _fullyQualifiedName.getLastSegment();
    _builder.append(_lastSegment, "");
    _builder.append(" get");
    String _name = p.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    String _name_1 = p.getName();
    _builder.append(_name_1, "	");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public void set");
    String _name_2 = p.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper_1, "");
    _builder.append("(");
    Type _type_1 = p.getType();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_1);
    String _lastSegment_1 = _fullyQualifiedName_1.getLastSegment();
    _builder.append(_lastSegment_1, "");
    _builder.append(" ");
    String _name_3 = p.getName();
    _builder.append(_name_3, "");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("this.");
    String _name_4 = p.getName();
    _builder.append(_name_4, "	");
    _builder.append(" = ");
    String _name_5 = p.getName();
    _builder.append(_name_5, "	");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePropertyGetterSetterInterface(final MyProperty p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Gets the ");
    String _name = p.getName();
    _builder.append(_name, " ");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @return The ");
    String _name_1 = p.getName();
    _builder.append(_name_1, " ");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public ");
    Type _type = p.getType();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_type);
    String _lastSegment = _fullyQualifiedName.getLastSegment();
    _builder.append(_lastSegment, "");
    _builder.append(" get");
    String _name_2 = p.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_2);
    _builder.append(_firstUpper, "");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Sets the ");
    String _name_3 = p.getName();
    _builder.append(_name_3, " ");
    _builder.append(".");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* @param ");
    String _name_4 = p.getName();
    _builder.append(_name_4, " ");
    _builder.append(" The ");
    String _name_5 = p.getName();
    _builder.append(_name_5, " ");
    _builder.append(" value.");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public void set");
    String _name_6 = p.getName();
    String _firstUpper_1 = StringExtensions.toFirstUpper(_name_6);
    _builder.append(_firstUpper_1, "");
    _builder.append("(");
    Type _type_1 = p.getType();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_1);
    String _lastSegment_1 = _fullyQualifiedName_1.getLastSegment();
    _builder.append(_lastSegment_1, "");
    _builder.append(" ");
    String _name_7 = p.getName();
    _builder.append(_name_7, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileMethod(final Method p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public ");
    Type _type = p.getType();
    QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_type);
    String _lastSegment = _fullyQualifiedName.getLastSegment();
    _builder.append(_lastSegment, "");
    _builder.append(" ");
    String _name = p.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "");
    _builder.append("(");
    {
      EList<Parameter> _params = p.getParams();
      boolean _hasElements = false;
      for(final Parameter prm : _params) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        Type _type_1 = prm.getType();
        QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_1);
        String _lastSegment_1 = _fullyQualifiedName_1.getLastSegment();
        _builder.append(_lastSegment_1, "");
        _builder.append(" ");
        String _name_1 = prm.getName();
        _builder.append(_name_1, "");
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("//TODO: implement method");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("throw new UnsupportedOperationException(\"Method is not implemented.\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileMethodInterface(final Method p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* TODO: Method description...");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* ");
    {
      EList<Parameter> _params = p.getParams();
      boolean _notEquals = (!Objects.equal(_params, null));
      if (_notEquals) {
        _builder.append("@param TODO: describle all parameters...");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* ");
    {
      Type _type = p.getType();
      QualifiedName _fullyQualifiedName = this._iQualifiedNameProvider.getFullyQualifiedName(_type);
      String _string = _fullyQualifiedName.toString();
      boolean _equals = _string.equals("void");
      boolean _not = (!_equals);
      if (_not) {
        _builder.append("@return TODO: Return value description...");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public ");
    Type _type_1 = p.getType();
    QualifiedName _fullyQualifiedName_1 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_1);
    String _lastSegment = _fullyQualifiedName_1.getLastSegment();
    _builder.append(_lastSegment, "");
    _builder.append(" ");
    String _name = p.getName();
    String _firstLower = StringExtensions.toFirstLower(_name);
    _builder.append(_firstLower, "");
    _builder.append("(");
    {
      EList<Parameter> _params_1 = p.getParams();
      boolean _hasElements = false;
      for(final Parameter prm : _params_1) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "");
        }
        Type _type_2 = prm.getType();
        QualifiedName _fullyQualifiedName_2 = this._iQualifiedNameProvider.getFullyQualifiedName(_type_2);
        String _lastSegment_1 = _fullyQualifiedName_2.getLastSegment();
        _builder.append(_lastSegment_1, "");
        _builder.append(" ");
        String _name_1 = prm.getName();
        _builder.append(_name_1, "");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileTUI(final String basePackage, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(basePackage, "");
    _builder.append(".views.tui;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The text user interface of the plugin.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(className, "	");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* updates the UI.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void update() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("printTUI();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Processes the input line.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param line The input.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @return TRUE, if the input was accepted.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean processInputLine(String line) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Prints the TUI.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void printTUI() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileModule(final String basePackage, final String className, final String subPackage) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(basePackage, "");
    _builder.append(".module;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.google.inject.AbstractModule;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ");
    _builder.append(basePackage, "");
    _builder.append(".database.I");
    _builder.append(this.pluginName, "");
    _builder.append("Database;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    _builder.append(basePackage, "");
    _builder.append(".controller.I");
    _builder.append(this.pluginName, "");
    _builder.append("Controller;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    _builder.append(basePackage, "");
    _builder.append(".model.I");
    _builder.append(this.pluginName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Final Google Guice module description of the plugin module.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className, "");
    _builder.append(" extends AbstractModul {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void configure() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("bind(I");
    _builder.append(this.pluginName, "    	");
    _builder.append("Controller.class).to(");
    _builder.append(basePackage, "    	");
    _builder.append(".controller.");
    _builder.append(subPackage, "    	");
    _builder.append(".");
    _builder.append(this.pluginName, "    	");
    _builder.append("Controller.class);   ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("bind(I");
    _builder.append(this.pluginName, "		");
    _builder.append("Database.class).to(");
    _builder.append(basePackage, "		");
    _builder.append(".database.");
    _builder.append(subPackage, "		");
    _builder.append(".");
    _builder.append(this.pluginName, "		");
    _builder.append("Database.class);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("bind(I");
    _builder.append(this.pluginName, "	    ");
    _builder.append(".class).to(");
    _builder.append(basePackage, "	    ");
    _builder.append(".model.");
    _builder.append(subPackage, "	    ");
    _builder.append(".");
    _builder.append(this.pluginName, "	    ");
    _builder.append(".class);\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileMain(final String basePackage, final String className, final String tuiName, final String implModuleName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(basePackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.BufferedReader;");
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.io.InputStreamReader;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.inject.Injector;");
    _builder.newLine();
    _builder.append("import com.google.inject.Guice;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ");
    _builder.append(basePackage, "");
    _builder.append(".module.");
    _builder.append(implModuleName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    _builder.append(basePackage, "");
    _builder.append(".views.tui.");
    _builder.append(tuiName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* The plugins startup class.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/ ");
    _builder.newLine();
    _builder.append("class ");
    _builder.append(className, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Injector INJECTOR = Guice.createInjector(new ");
    _builder.append(implModuleName, "	");
    _builder.append("());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* The programs main.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @param argsThe default program arguments.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* @throws IOException ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws IOException {\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(tuiName, "		");
    _builder.append(" tui = new ");
    _builder.append(tuiName, "		");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("InputStreamReader isr = new InputStreamReader(System.in, \"UTF-8\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BufferedReader br = new BufferedReader(isr);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("do {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tui.printTUI();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.printf(\"%n> \");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}while(tui.processInputLine(br.readLine()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"exit.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String getClassName(final String interfaceName) {
    String _substring = interfaceName.substring(1);
    String _firstUpper = StringExtensions.toFirstUpper(_substring);
    return _firstUpper;
  }
}
